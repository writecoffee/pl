(fun (param) unbound)

eqCon(tExpr(lamE("param", idE("unbound"))),
      tFunc(idE("param"), idE("unbound"), []))
eqCon(tExpr(idE("param")),
      tType(varT("a")))
eqCon(tExpr(idE("unbound")),
      tType(varT("b")))

=========================================================================

(fun (param) (+ 3 param))

eqCon(tExpr(lamE("param", bopE(plusOp, numE(3), idE("param")))),
      tFunc(idE("param"), bopE(plusOp, numE(3), idE("param")), []))
                                                        (0)
eqCon(tExpr(idE("param")),
      tType(varT("a")))                                 (1)
eqCon(tExpr(bopE(plusOp, numE(3), idE(param))),
      tBbop(numT, numE(3), idE("param"), []))           (2)
eqCon(tExpr(numE(3)),
      tType(baseT(numT)))
eqCon(tExpr(idE("param")),
      tType(varT("b")))                                 (3)

# Before-hand, 'idE("param")' in (0) would be substituted
# by 'varT("a")' and (1) consumed by type-infer.
#
# Now, firstly, 'varT("b")' searches for being substituted, 
# being substituted by 'varT("a")'; however, all its prior
# declaration are variable, a.k.a,
# no concrete type found and hence the searching should 
# continue.
# 
# Secondly, it looks for holes where it could plug itself
# into and got a type. So, in (2) 'idE(param)' got substituted
# by 'varT("a")'. And then (2)'s expected type, 'numT',
# will dictate 'idE("param")' to be 'numT', and its upstream
# occurence type would be changed too, which means finally
# in (0), 'varT("a")' will be substituted with type
# 'numT'. These are all triggered by (3)'s substitution phase.

=========================================================================

(fun (param) 3)

eqCon(tExpr(lamE("param", numE(3))),
      tFunc(idE("param"), numE(3), []))                 (1)
eqCon(tExpr(idE("param")),
      tType(varT("a")))                                 (2)
eqCon(tExpr(numE(3)),
      tType(baseT(numT)))                               (3)

=========================================================================

(fun (param) param)

eqCon(tExpr(lamE("param", idE("param"))),
      tFunc(idE("param"), idE("param"), []))            (1)
eqCon(tExpr(idE("param")),
      tType(varT("a")))                                 (2)
eqCon(tExpr(idE("param")),
      tType(varT("b")))

# Substitute (2) first and let (2) substitute all "param"
# occurence in (1).

=========================================================================

(fun (param) link(3, empty))

eqCon(tExpr(lamE("param", bopE(linkOp, numE(3), emptyE))),
      tFunc(idE("param"), bopE(linkOp, numE(3), emptyE), []))
eqCon(tExpr(idE("param")),
      tType(varT("a")))
eqCon(tExpr(bopE(linkOp, numE(3), emptyE)),
      tLink(numE(3), emptyE, []))
eqCon(tExpr(numE(3)),
      tType(baseT(numT)))
eqCon(tExpr(emptyE),
      tType(conT(listT, [varT("a")])))

=========================================================================
